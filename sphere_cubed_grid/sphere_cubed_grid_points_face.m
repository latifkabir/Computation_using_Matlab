function [ ns, xyz ] = sphere_cubed_grid_points_face ( n, i1, j1, k1, i2, ...
  j2, k2, ns, xyz )

%*****************************************************************************80
%
%% SPHERE_CUBED_GRID_POINTS_FACE: points on a face of a cubed sphere grid.
%
%  Discussion:
%
%    This function generates points on a face of a cubed sphere grid, and
%    appneds them to a growing list.
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    05 May 2015
%
%  Author:
%
%    John Burkardt
%
%  Parameters:
%
%    Input, integer N, the number of sections into which each face of
%    the cube is to be divided.
%
%    Input, integer I1, J1, K1, I2, J2, K2, the logical indices, between 0 
%    and N, of two corners of the face grid.  It is guaranteed that I1 <= I2,
%    J1 <= J2, and K1 <= K2.  
%
%    Input, integer NS, the initial number of points.
%
%    Input, real XYZ(NS,3), distinct points on the unit sphere
%    generated by a cubed sphere grid.
%
%    Output, integer NS, the final number of points.
%
%    Output, real XYZ(NS,3), distinct points on the unit sphere
%    generated by a cubed sphere grid, including the points just genereated.
%
  for i = i1 : i2

    if ( i1 < i2 )
      xc = tan ( ( 2 * i - n ) * 0.25 * pi / n );
    elseif ( i1 == 0 )
      xc = -1.0;
    elseif ( i1 == n )
      xc = +1.0;
    else
      xc = 0.0;
    end

    for j = j1 : j2

      if ( j1 < j2 )
        yc = tan ( ( 2 * j - n ) * 0.25 * pi / n );
      elseif ( j1 == 0 )
        yc = -1.0;
      elseif ( j1 == n )
        yc = +1.0;
      else
        yc = 0.0;
      end

      for k = k1 : k2

        if ( k1 < k2 )
          zc = tan ( ( 2 * k - n ) * 0.25 * pi / n );
        elseif ( k1 == 0 )
          zc = -1.0;
        elseif ( k1 == n )
          zc = +1.0;
        else
          zc = 0.0;
        end

        xyzn = sqrt ( xc^2 + yc^2 + zc^2 );

        ns = ns + 1;
        xyz(ns,1) = xc / xyzn;
        xyz(ns,2) = yc / xyzn;
        xyz(ns,3) = zc / xyzn;

      end
    end
  end

  return
end
